const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const { Pool } = require('pg');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const multer = require('multer');
const path = require('path');
const fs = require('fs');

// Initialize Express app
const app = express();
const PORT = process.env.PORT || 3000;
const JWT_SECRET = process.env.JWT_SECRET || 'novaxiii-secret-key';

// Database connection
const pool = new Pool({
  user: process.env.DB_USER || 'postgres',
  host: process.env.DB_HOST || 'localhost',
  database: process.env.DB_NAME || 'novaxiii',
  password: process.env.DB_PASSWORD || 'postgres',
  port: process.env.DB_PORT || 5432,
});

// Middleware
app.use(cors());
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.static('public'));

// Configure multer for file uploads
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    const uploadDir = path.join(__dirname, 'public', 'uploads');
    if (!fs.existsSync(uploadDir)) {
      fs.mkdirSync(uploadDir, { recursive: true });
    }
    cb(null, uploadDir);
  },
  filename: (req, file, cb) => {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    const ext = path.extname(file.originalname);
    cb(null, uniqueSuffix + ext);
  }
});

const upload = multer({ 
  storage: storage,
  limits: { fileSize: 10 * 1024 * 1024 }, // 10MB limit
  fileFilter: (req, file, cb) => {
    const allowedTypes = [
      'image/jpeg', 'image/png', 'image/gif', 
      'application/pdf', 'application/msword',
      'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
    ];
    if (allowedTypes.includes(file.mimetype)) {
      cb(null, true);
    } else {
      cb(new Error('Invalid file type. Only JPEG, PNG, GIF, PDF, and Word documents are allowed.'));
    }
  }
});

// Authentication middleware
const authenticateToken = (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];
  
  if (!token) return res.status(401).json({ message: 'Access denied. No token provided.' });
  
  jwt.verify(token, JWT_SECRET, (err, user) => {
    if (err) return res.status(403).json({ message: 'Invalid or expired token.' });
    req.user = user;
    next();
  });
};

// Admin middleware
const isAdmin = (req, res, next) => {
  if (req.user.role !== 'admin') {
    return res.status(403).json({ message: 'Access denied. Admin privileges required.' });
  }
  next();
};

// API Routes

// Auth routes
app.post('/api/auth/register', async (req, res) => {
  const { 
    email, password, first_name, last_name, 
    phone, address, city, state, zip,
    license_number, license_expiry
  } = req.body;
  
  try {
    // Check if email already exists
    const userCheck = await pool.query('SELECT * FROM users WHERE email = $1', [email]);
    if (userCheck.rows.length > 0) {
      return res.status(400).json({ message: 'Email already registered' });
    }
    
    // Hash password
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(password, salt);
    
    // Insert new user
    const newUser = await pool.query(
      `INSERT INTO users (
        email, password, first_name, last_name, 
        phone, address, city, state, zip,
        license_number, license_expiry, status
      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12) RETURNING id, email, first_name, last_name, role, status`,
      [
        email, hashedPassword, first_name, last_name, 
        phone, address, city, state, zip,
        license_number, license_expiry, 'pending'
      ]
    );
    
    res.status(201).json({ 
      message: 'Registration successful. Your account is pending approval.',
      user: newUser.rows[0]
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: 'Server error', error: err.message });
  }
});

app.post('/api/auth/login', async (req, res) => {
  const { email, password } = req.body;
  
  try {
    // Find user by email
    const result = await pool.query('SELECT * FROM users WHERE email = $1', [email]);
    const user = result.rows[0];
    
    if (!user) {
      return res.status(400).json({ message: 'Invalid email or password' });
    }
    
    // Check if account is active
    if (user.status !== 'active') {
      return res.status(403).json({ 
        message: 'Your account is not active. Please contact administration.'
      });
    }
    
    // Validate password
    const validPassword = await bcrypt.compare(password, user.password);
    if (!validPassword) {
      return res.status(400).json({ message: 'Invalid email or password' });
    }
    
    // Create JWT token
    const token = jwt.sign(
      { 
        id: user.id, 
        email: user.email, 
        role: user.role 
      }, 
      JWT_SECRET, 
      { expiresIn: '24h' }
    );
    
    // Remove password from user object
    delete user.password;
    
    res.status(200).json({
      success: true,
      token,
      user
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: 'Server error', error: err.message });
  }
});

// User routes
app.get('/api/users/me', authenticateToken, async (req, res) => {
  try {
    const result = await pool.query(
      'SELECT id, email, first_name, last_name, phone, address, city, state, zip, profile_image, bio, license_number, license_expiry, commission_rate, role, status, created_at FROM users WHERE id = $1',
      [req.user.id]
    );
    
    if (result.rows.length === 0) {
      return res.status(404).json({ message: 'User not found' });
    }
    
    res.status(200).json(result.rows[0]);
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: 'Server error', error: err.message });
  }
});

app.put('/api/users/me', authenticateToken, async (req, res) => {
  const { 
    first_name, last_name, phone, address, 
    city, state, zip, bio 
  } = req.body;
  
  try {
    const result = await pool.query(
      `UPDATE users 
       SET first_name = $1, last_name = $2, phone = $3, address = $4,
           city = $5, state = $6, zip = $7, bio = $8, updated_at = CURRENT_TIMESTAMP
       WHERE id = $9
       RETURNING id, email, first_name, last_name, phone, address, city, state, zip, profile_image, bio, role`,
      [first_name, last_name, phone, address, city, state, zip, bio, req.user.id]
    );
    
    res.status(200).json(result.rows[0]);
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: 'Server error', error: err.message });
  }
});

app.post('/api/users/profile-image', authenticateToken, upload.single('image'), async (req, res) => {
  if (!req.file) {
    return res.status(400).json({ message: 'No image uploaded' });
  }
  
  const imageUrl = `/uploads/${req.file.filename}`;
  
  try {
    const result = await pool.query(
      'UPDATE users SET profile_image = $1, updated_at = CURRENT_TIMESTAMP WHERE id = $2 RETURNING id, profile_image',
      [imageUrl, req.user.id]
    );
    
    res.status(200).json({ 
      message: 'Profile image updated successfully',
      profile_image: imageUrl
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: 'Server error', error: err.message });
  }
});

// Admin routes for managing users
app.get('/api/admin/users', authenticateToken, isAdmin, async (req, res) => {
  try {
    const result = await pool.query(
      'SELECT id, email, first_name, last_name, phone, role, status, created_at FROM users ORDER BY created_at DESC'
    );
    
    res.status(200).json(result.rows);
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: 'Server error', error: err.message });
  }
});

app.put('/api/admin/users/:id/status', authenticateToken, isAdmin, async (req, res) => {
  const { id } = req.params;
  const { status } = req.body;
  
  if (!['pending', 'active', 'inactive'].includes(status)) {
    return res.status(400).json({ message: 'Invalid status' });
  }
  
  try {
    const result = await pool.query(
      'UPDATE users SET status = $1, updated_at = CURRENT_TIMESTAMP WHERE id = $2 RETURNING id, email, status',
      [status, id]
    );
    
    if (result.rows.length === 0) {
      return res.status(404).json({ message: 'User not found' });
    }
    
    res.status(200).json(result.rows[0]);
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: 'Server error', error: err.message });
  }
});

// Listings routes
app.get('/api/listings', async (req, res) => {
  const { 
    page = 1, 
    limit = 10, 
    status = 'active', 
    featured,
    property_type,
    min_price,
    max_price,
    bedrooms,
    bathrooms,
    city,
    state
  } = req.query;
  
  const offset = (page - 1) * limit;
  
  try {
    let query = `
      SELECT l.*, u.first_name, u.last_name, u.email, u.phone,
      (SELECT image_url FROM property_images WHERE listing_id = l.id ORDER BY display_order LIMIT 1) as primary_image,
      COUNT(*) OVER() as total_count
      FROM listings l
      JOIN users u ON l.user_id = u.id
      WHERE 1=1
    `;
    
    const queryParams = [];
    let paramCount = 1;
    
    if (status) {
      query += ` AND l.status = $${paramCount}`;
      queryParams.push(status);
      paramCount++;
    }
    
    if (featured === 'true') {
      query += ` AND l.featured = $${paramCount}`;
      queryParams.push(true);
      paramCount++;
    }
    
    if (property_type) {
      query += ` AND l.property_type = $${paramCount}`;
      queryParams.push(property_type);
      paramCount++;
    }
    
    if (min_price) {
      query += ` AND l.price >= $${paramCount}`;
      queryParams.push(min_price);
      paramCount++;
    }
    
    if (max_price) {
      query += ` AND l.price <= $${paramCount}`;
      queryParams.push(max_price);
      paramCount++;
    }
    
    if (bedrooms) {
      query += ` AND l.bedrooms >= $${paramCount}`;
      queryParams.push(bedrooms);
      paramCount++;
    }
    
    if (bathrooms) {
      query += ` AND l.bathrooms >= $${paramCount}`;
      queryParams.push(bathrooms);
      paramCount++;
    }
    
    if (city) {
      query += ` AND l.city ILIKE $${paramCount}`;
      queryParams.push(`%${city}%`);
      paramCount++;
    }
    
    if (state) {
      query += ` AND l.state = $${paramCount}`;
      queryParams.push(state);
      paramCount++;
    }
    
    query += ` ORDER BY l.featured DESC, l.created_at DESC LIMIT $${paramCount} OFFSET $${paramCount + 1}`;
    queryParams.push(limit, offset);
    
    const result = await pool.query(query, queryParams);
    
    const totalCount = result.rows.length > 0 ? parseInt(result.rows[0].total_count) : 0;
    const totalPages = Math.ceil(totalCount / limit);
    
    res.status(200).json({
      listings: result.rows,
      pagination: {
        page: parseInt(page),
        limit: parseInt(limit),
        total: totalCount,
        pages: totalPages
      }
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: 'Server error', error: err.message });
  }
});

app.get('/api/listings/:id', async (req, res) => {
  const { id } = req.params;
  
  try {
    // Get listing with agent details
    const listingResult = await pool.query(`
      SELECT l.*, u.first_name, u.last_name, u.email, u.phone, u.profile_image
      FROM listings l
      JOIN users u ON l.user_id = u.id
      WHERE l.id = $1
    `, [id]);
    
    if (listingResult.rows.length === 0) {
      return res.status(404).json({ message: 'Listing not found' });
    }
    
    const listing = listingResult.rows[0];
    
    // Get listing images
    const imagesResult = await pool.query(`
      SELECT * FROM property_images 
      WHERE listing_id = $1 
      ORDER BY display_order
    `, [id]);
    
    listing.images = imagesResult.rows;
    
    res.status(200).json(listing);
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: 'Server error', error: err.message });
  }
});

app.post('/api/listings', authenticateToken, async (req, res) => {
  const { 
    title, description, price, address, city, state, zip,
    bedrooms, bathrooms, square_feet, lot_size, year_built,
    property_type, listing_type
  } = req.body;
  
  try {
    const result = await pool.query(`
      INSERT INTO listings (
        user_id, title, description, price, address, city, state, zip,
        bedrooms, bathrooms, square_feet, lot_size, year_built,
        property_type, listing_type
      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15)
      RETURNING *
    `, [
      req.user.id, title, description, price, address, city, state, zip,
      bedrooms, bathrooms, square_feet, lot_size, year_built,
      property_type, listing_type
    ]);
    
    res.status(201).json(result.rows[0]);
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: 'Server error', error: err.message });
  }
});

app.put('/api/listings/:id', authenticateToken, async (req, res) => {
  const { id } = req.params;
  const { 
    title, description, price, address, city, state, zip,
    bedrooms, bathrooms, square_feet, lot_size, year_built,
    property_type, listing_type, status
  } = req.body;
  
  try {
    // Check if listing exists and belongs to user or user is admin
    const checkResult = await pool.query(
      'SELECT user_id FROM listings WHERE id = $1', [id]
    );
    
    if (checkResult.rows.length === 0) {
      return res.status(404).json({ message: 'Listing not found' });
    }
    
    if (checkResult.rows[0].user_id !== req.user.id && req.user.role !== 'admin') {
      return res.status(403).json({ message: 'Not authorized to edit this listing' });
    }
    
    const result = await pool.query(`
      UPDATE listings SET
        title = $1,
        description = $2,
        price = $3,
        address = $4,
        city